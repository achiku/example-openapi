// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleAPIKey handles api_key security.
	HandleAPIKey(ctx context.Context, operationName string, t APIKey) (context.Context, error)
	// HandlePetstoreAuth handles petstore_auth security.
	HandlePetstoreAuth(ctx context.Context, operationName string, t PetstoreAuth) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

func (s *Server) securityAPIKey(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t APIKey
	const parameterName = "api_key"
	value := req.Header.Get(parameterName)
	if value == "" {
		return ctx, false, nil
	}
	t.APIKey = value
	rctx, err := s.sec.HandleAPIKey(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var oauth2Scopes = map[string][]string{
	"AddPet": []string{
		"write:pets",
		"read:pets",
	},
	"DeletePet": []string{
		"write:pets",
		"read:pets",
	},
	"FindPetsByStatus": []string{
		"read:pets",
	},
	"FindPetsByTags": []string{
		"read:pets",
	},
	"UpdatePet": []string{
		"write:pets",
		"read:pets",
	},
	"UpdatePetWithForm": []string{
		"write:pets",
		"read:pets",
	},
	"UploadFile": []string{
		"write:pets",
		"read:pets",
	},
}

func (s *Server) securityPetstoreAuth(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t PetstoreAuth
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Scopes = oauth2Scopes[operationName]
	rctx, err := s.sec.HandlePetstoreAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// APIKey provides api_key security value.
	APIKey(ctx context.Context, operationName string) (APIKey, error)
	// PetstoreAuth provides petstore_auth security value.
	PetstoreAuth(ctx context.Context, operationName string) (PetstoreAuth, error)
}

func (s *Client) securityAPIKey(ctx context.Context, operationName string, req *http.Request) error {
	t, err := s.sec.APIKey(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"APIKey\"")
	}
	req.Header.Set("api_key", t.APIKey)
	return nil
}
func (s *Client) securityPetstoreAuth(ctx context.Context, operationName string, req *http.Request) error {
	t, err := s.sec.PetstoreAuth(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"PetstoreAuth\"")
	}
	req.Header.Set("Authorization", "Bearer "+t.Token)
	return nil
}
