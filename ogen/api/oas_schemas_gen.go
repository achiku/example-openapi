// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"time"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
)

type APIKey struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *APIKey) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *APIKey) SetAPIKey(val string) {
	s.APIKey = val
}

// AddPetMethodNotAllowed is response for AddPet operation.
type AddPetMethodNotAllowed struct{}

func (*AddPetMethodNotAllowed) addPetRes() {}

// Describes the result of uploading an image resource.
// Ref: #/components/schemas/ApiResponse
type ApiResponse struct {
	Code    OptInt32  `json:"code"`
	Type    OptString `json:"type"`
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *ApiResponse) GetCode() OptInt32 {
	return s.Code
}

// GetType returns the value of Type.
func (s *ApiResponse) GetType() OptString {
	return s.Type
}

// GetMessage returns the value of Message.
func (s *ApiResponse) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ApiResponse) SetCode(val OptInt32) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *ApiResponse) SetType(val OptString) {
	s.Type = val
}

// SetMessage sets the value of Message.
func (s *ApiResponse) SetMessage(val OptString) {
	s.Message = val
}

// A category for a pet.
// Ref: #/components/schemas/Category
type Category struct {
	ID   OptInt64  `json:"id"`
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *Category) GetID() OptInt64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *Category) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *Category) SetID(val OptInt64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Category) SetName(val OptString) {
	s.Name = val
}

// CreateUserDef is default response for CreateUser operation.
type CreateUserDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *CreateUserDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *CreateUserDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// CreateUsersWithArrayInputDef is default response for CreateUsersWithArrayInput operation.
type CreateUsersWithArrayInputDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *CreateUsersWithArrayInputDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *CreateUsersWithArrayInputDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// CreateUsersWithListInputDef is default response for CreateUsersWithListInput operation.
type CreateUsersWithListInputDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *CreateUsersWithListInputDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *CreateUsersWithListInputDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// DeleteOrderBadRequest is response for DeleteOrder operation.
type DeleteOrderBadRequest struct{}

func (*DeleteOrderBadRequest) deleteOrderRes() {}

// DeleteOrderNotFound is response for DeleteOrder operation.
type DeleteOrderNotFound struct{}

func (*DeleteOrderNotFound) deleteOrderRes() {}

// DeletePetBadRequest is response for DeletePet operation.
type DeletePetBadRequest struct{}

// DeleteUserBadRequest is response for DeleteUser operation.
type DeleteUserBadRequest struct{}

func (*DeleteUserBadRequest) deleteUserRes() {}

// DeleteUserNotFound is response for DeleteUser operation.
type DeleteUserNotFound struct{}

func (*DeleteUserNotFound) deleteUserRes() {}

// FindPetsByStatusBadRequest is response for FindPetsByStatus operation.
type FindPetsByStatusBadRequest struct{}

func (*FindPetsByStatusBadRequest) findPetsByStatusRes() {}

type FindPetsByStatusOKApplicationJSON []Pet

func (*FindPetsByStatusOKApplicationJSON) findPetsByStatusRes() {}

type FindPetsByStatusStatusItem string

const (
	FindPetsByStatusStatusItemAvailable FindPetsByStatusStatusItem = "available"
	FindPetsByStatusStatusItemPending   FindPetsByStatusStatusItem = "pending"
	FindPetsByStatusStatusItemSold      FindPetsByStatusStatusItem = "sold"
)

// AllValues returns all FindPetsByStatusStatusItem values.
func (FindPetsByStatusStatusItem) AllValues() []FindPetsByStatusStatusItem {
	return []FindPetsByStatusStatusItem{
		FindPetsByStatusStatusItemAvailable,
		FindPetsByStatusStatusItemPending,
		FindPetsByStatusStatusItemSold,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FindPetsByStatusStatusItem) MarshalText() ([]byte, error) {
	switch s {
	case FindPetsByStatusStatusItemAvailable:
		return []byte(s), nil
	case FindPetsByStatusStatusItemPending:
		return []byte(s), nil
	case FindPetsByStatusStatusItemSold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FindPetsByStatusStatusItem) UnmarshalText(data []byte) error {
	switch FindPetsByStatusStatusItem(data) {
	case FindPetsByStatusStatusItemAvailable:
		*s = FindPetsByStatusStatusItemAvailable
		return nil
	case FindPetsByStatusStatusItemPending:
		*s = FindPetsByStatusStatusItemPending
		return nil
	case FindPetsByStatusStatusItemSold:
		*s = FindPetsByStatusStatusItemSold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// FindPetsByTagsBadRequest is response for FindPetsByTags operation.
type FindPetsByTagsBadRequest struct{}

func (*FindPetsByTagsBadRequest) findPetsByTagsRes() {}

type FindPetsByTagsOKApplicationJSON []Pet

func (*FindPetsByTagsOKApplicationJSON) findPetsByTagsRes() {}

type GetInventoryOK map[string]int32

func (s *GetInventoryOK) init() GetInventoryOK {
	m := *s
	if m == nil {
		m = map[string]int32{}
		*s = m
	}
	return m
}

// GetOrderByIdBadRequest is response for GetOrderById operation.
type GetOrderByIdBadRequest struct{}

func (*GetOrderByIdBadRequest) getOrderByIdRes() {}

// GetOrderByIdNotFound is response for GetOrderById operation.
type GetOrderByIdNotFound struct{}

func (*GetOrderByIdNotFound) getOrderByIdRes() {}

// GetPetByIdBadRequest is response for GetPetById operation.
type GetPetByIdBadRequest struct{}

func (*GetPetByIdBadRequest) getPetByIdRes() {}

// GetPetByIdNotFound is response for GetPetById operation.
type GetPetByIdNotFound struct{}

func (*GetPetByIdNotFound) getPetByIdRes() {}

// GetUserByNameBadRequest is response for GetUserByName operation.
type GetUserByNameBadRequest struct{}

func (*GetUserByNameBadRequest) getUserByNameRes() {}

// GetUserByNameNotFound is response for GetUserByName operation.
type GetUserByNameNotFound struct{}

func (*GetUserByNameNotFound) getUserByNameRes() {}

// LoginUserBadRequest is response for LoginUser operation.
type LoginUserBadRequest struct{}

func (*LoginUserBadRequest) loginUserRes() {}

type LoginUserOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LoginUserOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// LoginUserOKApplicationXMLHeaders wraps LoginUserOKApplicationXML with response headers.
type LoginUserOKApplicationXMLHeaders struct {
	SetCookie     OptString
	XExpiresAfter OptDateTime
	XRateLimit    OptInt32
	Response      LoginUserOKApplicationXML
}

// GetSetCookie returns the value of SetCookie.
func (s *LoginUserOKApplicationXMLHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetXExpiresAfter returns the value of XExpiresAfter.
func (s *LoginUserOKApplicationXMLHeaders) GetXExpiresAfter() OptDateTime {
	return s.XExpiresAfter
}

// GetXRateLimit returns the value of XRateLimit.
func (s *LoginUserOKApplicationXMLHeaders) GetXRateLimit() OptInt32 {
	return s.XRateLimit
}

// GetResponse returns the value of Response.
func (s *LoginUserOKApplicationXMLHeaders) GetResponse() LoginUserOKApplicationXML {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *LoginUserOKApplicationXMLHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetXExpiresAfter sets the value of XExpiresAfter.
func (s *LoginUserOKApplicationXMLHeaders) SetXExpiresAfter(val OptDateTime) {
	s.XExpiresAfter = val
}

// SetXRateLimit sets the value of XRateLimit.
func (s *LoginUserOKApplicationXMLHeaders) SetXRateLimit(val OptInt32) {
	s.XRateLimit = val
}

// SetResponse sets the value of Response.
func (s *LoginUserOKApplicationXMLHeaders) SetResponse(val LoginUserOKApplicationXML) {
	s.Response = val
}

func (*LoginUserOKApplicationXMLHeaders) loginUserRes() {}

// LoginUserOKHeaders wraps string with response headers.
type LoginUserOKHeaders struct {
	SetCookie     OptString
	XExpiresAfter OptDateTime
	XRateLimit    OptInt32
	Response      string
}

// GetSetCookie returns the value of SetCookie.
func (s *LoginUserOKHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetXExpiresAfter returns the value of XExpiresAfter.
func (s *LoginUserOKHeaders) GetXExpiresAfter() OptDateTime {
	return s.XExpiresAfter
}

// GetXRateLimit returns the value of XRateLimit.
func (s *LoginUserOKHeaders) GetXRateLimit() OptInt32 {
	return s.XRateLimit
}

// GetResponse returns the value of Response.
func (s *LoginUserOKHeaders) GetResponse() string {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *LoginUserOKHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetXExpiresAfter sets the value of XExpiresAfter.
func (s *LoginUserOKHeaders) SetXExpiresAfter(val OptDateTime) {
	s.XExpiresAfter = val
}

// SetXRateLimit sets the value of XRateLimit.
func (s *LoginUserOKHeaders) SetXRateLimit(val OptInt32) {
	s.XRateLimit = val
}

// SetResponse sets the value of Response.
func (s *LoginUserOKHeaders) SetResponse(val string) {
	s.Response = val
}

func (*LoginUserOKHeaders) loginUserRes() {}

// LogoutUserDef is default response for LogoutUser operation.
type LogoutUserDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *LogoutUserDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *LogoutUserDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategory returns new OptCategory with value set to v.
func NewOptCategory(v Category) OptCategory {
	return OptCategory{
		Value: v,
		Set:   true,
	}
}

// OptCategory is optional Category.
type OptCategory struct {
	Value Category
	Set   bool
}

// IsSet returns true if OptCategory was set.
func (o OptCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategory) Reset() {
	var v Category
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategory) SetTo(v Category) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategory) Get() (v Category, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategory) Or(d Category) Category {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderStatus returns new OptOrderStatus with value set to v.
func NewOptOrderStatus(v OrderStatus) OptOrderStatus {
	return OptOrderStatus{
		Value: v,
		Set:   true,
	}
}

// OptOrderStatus is optional OrderStatus.
type OptOrderStatus struct {
	Value OrderStatus
	Set   bool
}

// IsSet returns true if OptOrderStatus was set.
func (o OptOrderStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderStatus) Reset() {
	var v OrderStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderStatus) SetTo(v OrderStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderStatus) Get() (v OrderStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderStatus) Or(d OrderStatus) OrderStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetStatus returns new OptPetStatus with value set to v.
func NewOptPetStatus(v PetStatus) OptPetStatus {
	return OptPetStatus{
		Value: v,
		Set:   true,
	}
}

// OptPetStatus is optional PetStatus.
type OptPetStatus struct {
	Value PetStatus
	Set   bool
}

// IsSet returns true if OptPetStatus was set.
func (o OptPetStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetStatus) Reset() {
	var v PetStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetStatus) SetTo(v PetStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetStatus) Get() (v PetStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetStatus) Or(d PetStatus) PetStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePetWithFormReq returns new OptUpdatePetWithFormReq with value set to v.
func NewOptUpdatePetWithFormReq(v UpdatePetWithFormReq) OptUpdatePetWithFormReq {
	return OptUpdatePetWithFormReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePetWithFormReq is optional UpdatePetWithFormReq.
type OptUpdatePetWithFormReq struct {
	Value UpdatePetWithFormReq
	Set   bool
}

// IsSet returns true if OptUpdatePetWithFormReq was set.
func (o OptUpdatePetWithFormReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePetWithFormReq) Reset() {
	var v UpdatePetWithFormReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePetWithFormReq) SetTo(v UpdatePetWithFormReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePetWithFormReq) Get() (v UpdatePetWithFormReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePetWithFormReq) Or(d UpdatePetWithFormReq) UpdatePetWithFormReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadFileReq returns new OptUploadFileReq with value set to v.
func NewOptUploadFileReq(v UploadFileReq) OptUploadFileReq {
	return OptUploadFileReq{
		Value: v,
		Set:   true,
	}
}

// OptUploadFileReq is optional UploadFileReq.
type OptUploadFileReq struct {
	Value UploadFileReq
	Set   bool
}

// IsSet returns true if OptUploadFileReq was set.
func (o OptUploadFileReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadFileReq) Reset() {
	var v UploadFileReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadFileReq) SetTo(v UploadFileReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadFileReq) Get() (v UploadFileReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadFileReq) Or(d UploadFileReq) UploadFileReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// An order for a pets from the pet store.
// Ref: #/components/schemas/Order
type Order struct {
	ID       OptInt64    `json:"id"`
	PetId    OptInt64    `json:"petId"`
	Quantity OptInt32    `json:"quantity"`
	ShipDate OptDateTime `json:"shipDate"`
	// Order Status.
	Status   OptOrderStatus `json:"status"`
	Complete OptBool        `json:"complete"`
}

// GetID returns the value of ID.
func (s *Order) GetID() OptInt64 {
	return s.ID
}

// GetPetId returns the value of PetId.
func (s *Order) GetPetId() OptInt64 {
	return s.PetId
}

// GetQuantity returns the value of Quantity.
func (s *Order) GetQuantity() OptInt32 {
	return s.Quantity
}

// GetShipDate returns the value of ShipDate.
func (s *Order) GetShipDate() OptDateTime {
	return s.ShipDate
}

// GetStatus returns the value of Status.
func (s *Order) GetStatus() OptOrderStatus {
	return s.Status
}

// GetComplete returns the value of Complete.
func (s *Order) GetComplete() OptBool {
	return s.Complete
}

// SetID sets the value of ID.
func (s *Order) SetID(val OptInt64) {
	s.ID = val
}

// SetPetId sets the value of PetId.
func (s *Order) SetPetId(val OptInt64) {
	s.PetId = val
}

// SetQuantity sets the value of Quantity.
func (s *Order) SetQuantity(val OptInt32) {
	s.Quantity = val
}

// SetShipDate sets the value of ShipDate.
func (s *Order) SetShipDate(val OptDateTime) {
	s.ShipDate = val
}

// SetStatus sets the value of Status.
func (s *Order) SetStatus(val OptOrderStatus) {
	s.Status = val
}

// SetComplete sets the value of Complete.
func (s *Order) SetComplete(val OptBool) {
	s.Complete = val
}

func (*Order) getOrderByIdRes() {}
func (*Order) placeOrderRes()   {}

// Order Status.
type OrderStatus string

const (
	OrderStatusPlaced    OrderStatus = "placed"
	OrderStatusApproved  OrderStatus = "approved"
	OrderStatusDelivered OrderStatus = "delivered"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusPlaced,
		OrderStatusApproved,
		OrderStatusDelivered,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusPlaced:
		return []byte(s), nil
	case OrderStatusApproved:
		return []byte(s), nil
	case OrderStatusDelivered:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusPlaced:
		*s = OrderStatusPlaced
		return nil
	case OrderStatusApproved:
		*s = OrderStatusApproved
		return nil
	case OrderStatusDelivered:
		*s = OrderStatusDelivered
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A pet for sale in the pet store.
// Ref: #/components/schemas/Pet
type Pet struct {
	ID        OptInt64    `json:"id"`
	Category  OptCategory `json:"category"`
	Name      string      `json:"name"`
	PhotoUrls []string    `json:"photoUrls"`
	Tags      []Tag       `json:"tags"`
	// Pet status in the store.
	//
	// Deprecated: schema marks this property as deprecated.
	Status OptPetStatus `json:"status"`
}

// GetID returns the value of ID.
func (s *Pet) GetID() OptInt64 {
	return s.ID
}

// GetCategory returns the value of Category.
func (s *Pet) GetCategory() OptCategory {
	return s.Category
}

// GetName returns the value of Name.
func (s *Pet) GetName() string {
	return s.Name
}

// GetPhotoUrls returns the value of PhotoUrls.
func (s *Pet) GetPhotoUrls() []string {
	return s.PhotoUrls
}

// GetTags returns the value of Tags.
func (s *Pet) GetTags() []Tag {
	return s.Tags
}

// GetStatus returns the value of Status.
func (s *Pet) GetStatus() OptPetStatus {
	return s.Status
}

// SetID sets the value of ID.
func (s *Pet) SetID(val OptInt64) {
	s.ID = val
}

// SetCategory sets the value of Category.
func (s *Pet) SetCategory(val OptCategory) {
	s.Category = val
}

// SetName sets the value of Name.
func (s *Pet) SetName(val string) {
	s.Name = val
}

// SetPhotoUrls sets the value of PhotoUrls.
func (s *Pet) SetPhotoUrls(val []string) {
	s.PhotoUrls = val
}

// SetTags sets the value of Tags.
func (s *Pet) SetTags(val []Tag) {
	s.Tags = val
}

// SetStatus sets the value of Status.
func (s *Pet) SetStatus(val OptPetStatus) {
	s.Status = val
}

func (*Pet) addPetRes()     {}
func (*Pet) getPetByIdRes() {}
func (*Pet) updatePetRes()  {}

// Pet status in the store.
//
// Deprecated: schema marks this type as deprecated.
type PetStatus string

const (
	PetStatusAvailable PetStatus = "available"
	PetStatusPending   PetStatus = "pending"
	PetStatusSold      PetStatus = "sold"
)

// AllValues returns all PetStatus values.
func (PetStatus) AllValues() []PetStatus {
	return []PetStatus{
		PetStatusAvailable,
		PetStatusPending,
		PetStatusSold,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PetStatus) MarshalText() ([]byte, error) {
	switch s {
	case PetStatusAvailable:
		return []byte(s), nil
	case PetStatusPending:
		return []byte(s), nil
	case PetStatusSold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetStatus) UnmarshalText(data []byte) error {
	switch PetStatus(data) {
	case PetStatusAvailable:
		*s = PetStatusAvailable
		return nil
	case PetStatusPending:
		*s = PetStatusPending
		return nil
	case PetStatusSold:
		*s = PetStatusSold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PetstoreAuth struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *PetstoreAuth) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *PetstoreAuth) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *PetstoreAuth) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *PetstoreAuth) SetScopes(val []string) {
	s.Scopes = val
}

// PlaceOrderBadRequest is response for PlaceOrder operation.
type PlaceOrderBadRequest struct{}

func (*PlaceOrderBadRequest) placeOrderRes() {}

// A tag for a pet.
// Ref: #/components/schemas/Tag
type Tag struct {
	ID   OptInt64  `json:"id"`
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *Tag) GetID() OptInt64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *Tag) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *Tag) SetID(val OptInt64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Tag) SetName(val OptString) {
	s.Name = val
}

// UpdatePetBadRequest is response for UpdatePet operation.
type UpdatePetBadRequest struct{}

func (*UpdatePetBadRequest) updatePetRes() {}

// UpdatePetMethodNotAllowed is response for UpdatePet operation.
type UpdatePetMethodNotAllowed struct{}

func (*UpdatePetMethodNotAllowed) updatePetRes() {}

// UpdatePetNotFound is response for UpdatePet operation.
type UpdatePetNotFound struct{}

func (*UpdatePetNotFound) updatePetRes() {}

// UpdatePetWithFormMethodNotAllowed is response for UpdatePetWithForm operation.
type UpdatePetWithFormMethodNotAllowed struct{}

type UpdatePetWithFormReq struct {
	// Updated name of the pet.
	Name OptString `json:"name"`
	// Updated status of the pet.
	Status OptString `json:"status"`
}

// GetName returns the value of Name.
func (s *UpdatePetWithFormReq) GetName() OptString {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *UpdatePetWithFormReq) GetStatus() OptString {
	return s.Status
}

// SetName sets the value of Name.
func (s *UpdatePetWithFormReq) SetName(val OptString) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *UpdatePetWithFormReq) SetStatus(val OptString) {
	s.Status = val
}

// UpdateUserBadRequest is response for UpdateUser operation.
type UpdateUserBadRequest struct{}

func (*UpdateUserBadRequest) updateUserRes() {}

// UpdateUserNotFound is response for UpdateUser operation.
type UpdateUserNotFound struct{}

func (*UpdateUserNotFound) updateUserRes() {}

type UploadFileReq struct {
	// Additional data to pass to server.
	AdditionalMetadata OptString `json:"additionalMetadata"`
	// File to upload.
	File OptMultipartFile `json:"file"`
}

// GetAdditionalMetadata returns the value of AdditionalMetadata.
func (s *UploadFileReq) GetAdditionalMetadata() OptString {
	return s.AdditionalMetadata
}

// GetFile returns the value of File.
func (s *UploadFileReq) GetFile() OptMultipartFile {
	return s.File
}

// SetAdditionalMetadata sets the value of AdditionalMetadata.
func (s *UploadFileReq) SetAdditionalMetadata(val OptString) {
	s.AdditionalMetadata = val
}

// SetFile sets the value of File.
func (s *UploadFileReq) SetFile(val OptMultipartFile) {
	s.File = val
}

// A User who is purchasing from the pet store.
// Ref: #/components/schemas/User
type User struct {
	ID        OptInt64  `json:"id"`
	Username  OptString `json:"username"`
	FirstName OptString `json:"firstName"`
	LastName  OptString `json:"lastName"`
	Email     OptString `json:"email"`
	Password  OptString `json:"password"`
	Phone     OptString `json:"phone"`
	// User Status.
	UserStatus OptInt32 `json:"userStatus"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptInt64 {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() OptString {
	return s.Username
}

// GetFirstName returns the value of FirstName.
func (s *User) GetFirstName() OptString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *User) GetLastName() OptString {
	return s.LastName
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *User) GetPassword() OptString {
	return s.Password
}

// GetPhone returns the value of Phone.
func (s *User) GetPhone() OptString {
	return s.Phone
}

// GetUserStatus returns the value of UserStatus.
func (s *User) GetUserStatus() OptInt32 {
	return s.UserStatus
}

// SetID sets the value of ID.
func (s *User) SetID(val OptInt64) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val OptString) {
	s.Username = val
}

// SetFirstName sets the value of FirstName.
func (s *User) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val OptString) {
	s.LastName = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *User) SetPassword(val OptString) {
	s.Password = val
}

// SetPhone sets the value of Phone.
func (s *User) SetPhone(val OptString) {
	s.Phone = val
}

// SetUserStatus sets the value of UserStatus.
func (s *User) SetUserStatus(val OptInt32) {
	s.UserStatus = val
}

func (*User) getUserByNameRes() {}
